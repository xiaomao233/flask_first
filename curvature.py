# 输入0<=t<=1,起始点p0，终点p3，控制点p1,p2，返回曲线的曲率半径
# 贝赛尔三次曲线公式：B(t)=P0(1-t)^3+3P1t(1-t)^2+3P2t^2(1-t)+P3t^3
# 得到参数方程
# y=yP0(1-t)^3+3yP1t(1-t)^2+3yP2t^2(1-t)+yP3t^3
# x=xP0(1-t)^3+3xP1t(1-t)^2+3xP2t^2(1-t)+xP3t^3
# dy/dt=y1+y2+y3
# dx/dt=x1+x2+x3
# z=y'=dy/dx=(dy/dt)/(dx/dt)
# dz=y''=dy'/dx=(dy'/dt)/(dx/dt)
# 曲率计算公式 K=|y''|/(1+y'^2)^(3/2)
# 曲率半径R=1/K

import math


def curvature(t, p0, p1, p2, p3):

    x1 = p1[0] - p0[0]
    x2 = 2 * (p0[0] - 2 * p1[0] + p2[0]) * t
    x3 = (-p0[0] + 3 * p1[0] - 3 * p2[0] + p3[0]) * t * t

    y1 = p1[1] - p0[1]
    y2 = 2 * (p0[1] - 2 * p1[1] + p2[1]) * t
    y3 = (-p0[1] + 3 * p1[1] - 3 * p2[1] + p3[1]) * t * t

    dx1 = p0[0] - 2 * p1[0] + p2[0]
    dx2 = (-p0[0] + 3 * p1[0] - 3 * p2[0] + p3[0]) * t

    dy1 = p0[1] - 2 * p1[1] + p2[1]
    dy2 = (-p0[1] + 3 * p1[1] - 3 * p2[1] + p3[1]) * t

    z = (y1 + y2 + y3) / (x1 + x2 + x3)
    dz = (2 * ((dy1 + dy2) * (x1 + x2 + x3) - (dx1 + dx2) * (y1 + y2 + y3))) / (3 * math.pow(x1 + x2 + x3, 3))

    r = math.pow(1 + z * z, 1.5) / abs(dz)
    return r
